csharp
Copy code
using System;
using System.IO;

public class FileSimilarityChecker
{
    public static double CompareFiles(string file1, string file2)
    {
        using (FileStream fs1 = new FileStream(file1, FileMode.Open, FileAccess.Read))
        using (FileStream fs2 = new FileStream(file2, FileMode.Open, FileAccess.Read))
        {
            byte[] b
            fs1.Read(bytes1, 0, bytes1.Length);

            byte[] bytes2 = new byte[fs2.Length];
            fs2.Read(bytes2, 0, bytes2.Length);

            int matches = 0;
            for (int i = 0; i < bytes1.Length - 50; i += 50)
            {
                byte[] sequence = new byte[50];
                Array.Copy(bytes1, i, sequence, 0, 50);

                if (ArrayContains(bytes2, sequence))
                {
                    matches++;
                }
            }

            double similarity = (double)matches / (bytes1.Length / 50);
            return similarity;
        }
    }

    private static bool ArrayContains(byte[] array, byte[] sequence)
    {
        for (int i = 0; i <= array.Length - sequence.Length; i++)
        {
            bool foundMatch = true;
            for (int j = 0; j < sequence.Length; j++)
            {
                if (sequence[j] != array[i + j])
                {
                    foundMatch = false;
                    break;
                }
            }

            if (foundMatch)
            {
                return true;
            }
        }

        return false;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        if (args.Length != 2)
        {
            Console.WriteLine("Usage: dotnet run file1 file2");
            return;
        }

        string file1 = args[0];
        string file2 = args[1];

        double similarity = FileSimilarityChecker.CompareFiles(file1, file2);
        Console.WriteLine($"Similarity: {similarity * 100}%");
    }
}